<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	
	<!-- special starter project that provides default configurations for our application and a complete dependency tree to quickly build our Spring Boot project.
	 	It also provides default configurations for Maven plugins, such as maven-failsafe-plugin, maven-jar-plugin, maven-surefire-plugin, and maven-war-plugin.
		Beyond that, it also inherits dependency management from spring-boot-dependencies, which is the parent to the spring-boot-starter-parent. 
		
		** Once we've declared the starter parent in our project, we can pull any dependency from the parent by just declaring it in our dependencies tag. 
		We also don't need to define versions of the dependencies; Maven will download jar files based on the version defined for the starter parent in the parent tag.
		
		** To manage a different version of a dependency provided by the starter parent, we can declare dependency and its version explicitly in the dependencyManagement section:
		EX: <dependencyManagement>
			    <dependencies>
			        <dependency>
			            <groupId>org.springframework.boot</groupId>
			            <artifactId>spring-boot-starter-data-jpa</artifactId>
			            <version>2.4.0</version>
			        </dependency>
			    </dependencies>
			</dependencyManagement>
			
		-->
	
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.ks.cfk</groupId>
	<artifactId>ks-webframework</artifactId> 	
	<packaging>war</packaging>
	<name>ks-webframework</name>				
	<!-- <version>0.0.1-SNAPSHOT</version>  -->
					
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		 <version>2.4.4</version>
		<relativePath/>
	</parent>
	
	<properties>
	    <java.version>1.8</java.version>
		<!-- <spring.version>3.2.18.RELEASE</spring.version>  -->		
		<!--  this is required to use run on server to indicate as main class to initiate 
		 	<start-class>com.firststep.controller.ServletInitializer</start-class>   -->
	</properties>
	
	<dependencies>
		<!--   Thymeleaf is a Java-based library used to create a web application. It provides a good support for serving a XHTML/HTML5 in web applications.
		Thymeleaf Templates
		Thymeleaf converts your files into well-formed XML files. It contains 6 types of templates as given below âˆ’
		XML , Valid XML, XHTML , Valid XHTML , HTML5 , Legacy HTML5 , All templates, except Legacy HTML5, are referring to well-formed valid XML files. Legacy HTML5 allows us to render the HTML5 tags in web page including not closed tags. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
            <optional>true</optional>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-boot-starter</artifactId>
			<version>3.0.0</version>
		</dependency>
		 <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
	    <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
	     </dependency>
	</dependencies>

	<build>
	 	<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>			
				<configuration>
					<compilerVersion>1.8</compilerVersion>
					<fork>true</fork>
					<executable>C:\Program Files\Java\jdk1.8.0_161\bin\javac</executable>					
				</configuration>
				  <executions>
			          <execution>
			            <id>repackage</id>
			            <goals>
			              <goal>repackage</goal>
			            </goals>
			            <configuration>
			              <skip>${skip.repackage}</skip>
			            </configuration>
			          </execution>
			        </executions>
			</plugin>
		</plugins>
	</build>
	
	<!-- for production :   mvn clean package -P prod -->
	<profiles>
	    <profile>
	      <id>default</id>
	      	<repositories>
	            <repository>
	                <id>central</id>
	                <url>https://repo1.maven.org/maven2</url>
	                <snapshots>
	                    <enabled>false</enabled>
	                </snapshots>
	                <releases>
	                    <enabled>true</enabled>
	                </releases>
	            </repository>
        	</repositories>
	      <activation>
	        <activeByDefault>true</activeByDefault>
	      </activation>
	      <properties>
	        <skip.repackage>false</skip.repackage>
	      </properties>
	    </profile>
	    
	    
	    <profile>
	      <id>prod</id>
	      <properties>
	        <skip.repackage>true</skip.repackage>
	      </properties>
	    </profile>
  </profiles>

</project>
